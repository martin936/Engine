#version 450
#extension GL_EXT_samplerless_texture_functions : require
#extension GL_GOOGLE_include_directive : require

#define SDF_CB_SLOT				11
#define SDF_TEX_SLOT			0

#define NUM_RAYS				1

#include "../../Lights/GLSL/SDF.glsl"
#include "../../Lights/GLSL/Lighting.glsl"

layout(binding = 12, std140) uniform cb12
{
	mat4	m_View;
	mat4	m_Proj;
	mat4	m_ViewProj;
	mat4	m_InvView;
	mat4	m_InvViewProj;

	mat4	m_LastView;
	mat4	m_LastProj;
	mat4	m_LastViewProj;
	mat4	m_LastInvView;
	mat4	m_LastInvViewProj;

	vec4	m_Eye;
};


layout(push_constant) uniform pc0
{
	float SkyIntensity;
	uint TemporalOffset;
};


layout(binding = 1) uniform sampler			sampLinear;
layout(binding = 2) uniform texture2D		DepthMap;
layout(binding = 3) uniform texture2D		NormalMap;

layout(binding = 4) uniform texture3D		IrradianceCache;
layout(binding = 5) uniform textureCube		SkyLight;

layout(binding = 6) uniform utexture2D		Sobol16;
layout(binding = 7) uniform utexture3D		OwenScrambling16;
layout(binding = 8) uniform utexture3D		OwenRanking16;

layout(binding = 9,		rgba16f)	uniform writeonly restrict image2D rayChroma;
layout(binding = 10,	rgba16f)	uniform writeonly restrict image2D rayLumaSH;


float Luminance(vec3 rgb)
{
	return dot(rgb, vec3(0.299f, 0.587f, 0.114f));
}


float OwenScrambledSobol(uint pixel_i, uint pixel_j, uint sampleIndex, uint sampleDimension)
{
	// wrap arguments
	pixel_i = pixel_i & 127;
	pixel_j = pixel_j & 127;
	sampleIndex = sampleIndex & 255;
	sampleDimension = sampleDimension & 255;

	// xor index based on optimized ranking
	uint rankedSampleIndex = sampleIndex ^ texelFetch(OwenRanking16, ivec3(pixel_i, pixel_j, sampleDimension & 7), 0).r;

	// fetch value in sequence
	uint value = texelFetch(Sobol16, ivec2(sampleDimension, rankedSampleIndex), 0).r;

	// If the dimension is optimized, xor sequence value based on optimized scrambling
	value = value ^ texelFetch(OwenScrambling16, ivec3(pixel_i, pixel_j, sampleDimension & 7), 0).r;

	// convert to float and return
	float v = (0.5f+value)/256.0f;
	return v;
}


vec3 Noise2Dir(vec3 N, vec2 u)
{
	float r = sqrt(1.f - u.x);
	float phi = 2.f * 3.1415926f * u.y;

	vec3 dir;
	dir.x = cos(phi) * r;
	dir.y = sin(phi) * r;
	dir.z = sqrt(u.x);

    vec3 UpVector = abs(N.z) < 0.999 ? vec3(0, 0, 1) : vec3(1, 0, 0);
    vec3 TangentX = normalize(cross(UpVector, N));
    vec3 TangentY = cross(N, TangentX);

    // Tangent to world space
    return TangentX * dir.x + TangentY * dir.y + N * dir.z;
}


layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in; 
void main() 
{
	vec2 size = textureSize(DepthMap, 0).xy;
	float depth = texelFetch(DepthMap, ivec2(gl_GlobalInvocationID.xy), 0).r;

	if (depth == 0.f)
	{
		imageStore(rayChroma, ivec2(gl_GlobalInvocationID.xy), 0.f.xxxx);
		imageStore(rayLumaSH, ivec2(gl_GlobalInvocationID.xy), 0.f.xxxx);
		return;
	}

	vec2 Texcoords = (gl_GlobalInvocationID.xy + 0.5f) / size;
	Texcoords.y = 1.f - Texcoords.y;

	vec4 pos = m_InvViewProj * vec4(Texcoords.xy * vec2(2.f, 2.f) - vec2(1.f, 1.f), depth, 1.f);
	pos /= pos.w;

	vec4 normalTex	= texelFetch(NormalMap, ivec2(gl_GlobalInvocationID.xy), 0);

	vec3 normal		= DecodeOct(normalTex.rg);
	float linearRoughness = normalTex.b;
	float roughness = max(0.06f, linearRoughness * linearRoughness);
	vec3 view		= pos.xyz - m_Eye.xyz;
	float distToCam = length(view);

	vec3 origin = pos.xyz;
	vec3 sum = 0.f.xxx;

	view /= distToCam;

	vec4 lumaSH = 0.f.xxxx;
	vec3 color = 0.f.xxx;

	for (int i = 0; i < NUM_RAYS; i++)
	{
		pos.xyz = origin;

		vec2 noise = vec2(OwenScrambledSobol(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y, TemporalOffset, 0), OwenScrambledSobol(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y, TemporalOffset, 1));

		float w;
		vec3 r = Noise2Dir(normal, noise);

		float rayLength = 0.f;
		vec3 light = 0.f.xxx;
	
		if (!RayMarchSDF(sampLinear, pos.xyz, r, rayLength))
		{
			light = SkyIntensity * textureLod(samplerCube(SkyLight, sampLinear), vec3(-r.x, r.z, -r.y), 0).xyz;
		}

		else
		{
			pos.xyz += rayLength * r;

			vec3 coords = Pos2Coords(pos.xyz);

			vec4 irradiance = textureLod(sampler3D(IrradianceCache, sampLinear), coords, 0.f);

			if (isnan(dot(irradiance, 1.f.xxxx)))
				irradiance = 0.f.xxxx;

			light = irradiance.rgb / max(1e-6f, irradiance.a);
		}

		float luma = Luminance(light);

		color += light;

		lumaSH.x += Ylm(0, r) * luma;
		lumaSH.y += Ylm(1, r) * luma;
		lumaSH.z += Ylm(2, r) * luma;
		lumaSH.w += Ylm(3, r) * luma;
	}

	color	*= (1.f / NUM_RAYS);
	lumaSH	*= (1.f / NUM_RAYS);

	color /= max(1e-8f, lumaSH.x);

	imageStore(rayChroma, ivec2(gl_GlobalInvocationID.xy), vec4(color, 0.f));
	imageStore(rayLumaSH, ivec2(gl_GlobalInvocationID.xy), lumaSH);
}
