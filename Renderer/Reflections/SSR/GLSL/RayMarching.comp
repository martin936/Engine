// shadertype=glsl

#version 450


layout (std140) uniform cb0
{
	mat4	ViewProj;
	mat4	InvViewProj;
	vec4	Eye;
	vec4	NearFar;
};


#define Near	NearFar.x
#define Far		NearFar.y
#define Size	NearFar.zw


#define RAYMARCHING_STEP		0.01f
#define RAYMARCHING_MAX_STEPS	2


uniform layout(rgba16f, binding = 0) image2D RayData;


layout(location = 0) uniform sampler2D ZMap;


vec3 Unpack_Pos(out float fZDist)
{
	vec2	texcoords	= (gl_GlobalInvocationID.xy + 0.5f) / Size;
	fZDist				= textureLod(ZMap, texcoords, 0).r;

	fZDist = (Far + Near) / (Far - Near) - 2.f * Far * Near / (fZDist * (Far - Near));

	vec4	pos			= InvViewProj * vec4(texcoords * 2.f - 1.f , fZDist * 0.5f + 0.5f, 1.f);
	
	return	pos.xyz / pos.w;
}


vec2 Clip(vec2 cIn, vec2 cMin, vec2 cMax, vec2 cM)
{
    vec2 t = 1.f.xx;

    vec2 diff = sign(cIn - cM) * max(1e-6f.xx, abs(cIn - cM));

    t = clamp(min(t, max((cMax - cM) / diff, (cMin - cM) / diff)), 0.f, 1.f);

    return min(t.r, t.g) * (cIn - cM) + cM;
}



vec2 ComputeCoordsLeavingCell(in vec2 TexcInCell, in vec2 CellSize, in vec2 RayDir)
{
    vec2 CellCoords = CellSize * (0.5f + floor(TexcInCell / CellSize));

    return Clip(TexcInCell + RayDir, CellCoords - CellSize * 0.5f, CellCoords + CellSize * 0.5f, TexcInCell) + RayDir * 2e-4f;
}



float ComputeRayDepth(in vec2 Texc, in vec2 TexcOrigin, in vec2 p, in vec2 r, in float scale, out float t)
{
    float alpha = 2.f * length(Texc - TexcOrigin);
    t           = alpha * p.y * p.y / (scale - (p.y * r.y) * alpha);
    float z     = (p.x + t * r.x) / (p.y + t * r.y);

    return 2.f * Near * Far / ((Far + Near) - (2.f * z - 1.f) * (Far - Near));
}


bool RayTrace(in vec3 Pos, in vec3 Dir, in vec2 Texc, in float NdotV, in uint MaxSteps, out vec3 HitPoint)
{
    vec2  PixelSize		= 1.f / textureSize(ZMap, 0);

    vec4  p				= ViewProj * vec4(Pos, 1.f);
    vec4  r				= ViewProj * vec4(Dir, 0.f);
    vec2  dir			= p.w * r.xy - r.w * p.xy;
    float   scale       = length(dir);
    dir /= scale;

    vec2	u			= vec2(dir.x, dir.y);
    uint    level       = 1U;
    uint    targetLevel = 0U;
    vec2	cell_size   = 2.f * PixelSize.xy;

    vec2	texc        = Texc + mix(16.f, 2.f, NdotV) * PixelSize.x * u;
    vec2	next_texc   = ComputeCoordsLeavingCell(texc, cell_size, u);
    float   RayLength   = 0.f;
    float   RayDepth    = ComputeRayDepth(next_texc, Texc, p.zw, r.zw, scale, RayLength);

    vec2	texc_out_of_higher_cell = next_texc;
    bool    bHigherCellTested       = false;

    for (uint i = 0U; i < MaxSteps; i++)
    {
        // Get the minimum depth of the geometry within the cell
        float GeomDepth = textureLod(ZMap, texc, level).r;

        // Hit
        if (GeomDepth < RayDepth  && length(texc - Texc - mix(16.f, 2.f, NdotV) * PixelSize.x * u) > 1e-4f)
        {
            // Final hit point
            if (level <= targetLevel)
            {
                // Is the hit point occluded by geometry ?
                float MinRayDepth = ComputeRayDepth(texc, Texc, p.zw, r.zw, scale, RayLength);

                if (RayDepth - GeomDepth > 8.f * (RayDepth - MinRayDepth))//max(10.f * (targetLevel + 1) * (targetLevel + 1), 1.f * (RayDepth - MinRayDepth)))
                {
                    HitPoint = 0.f.xxx;
                    return false;
                }
                    
                // Hit point is valid
                HitPoint = Pos + RayLength * Dir;
                return true;
            }

            // Check lower mip level
            cell_size /= 2.f;
            level--;

            bHigherCellTested = true;
            texc_out_of_higher_cell = next_texc;
        }

        // No hit
        else
        {
            // Go to a higher mip level if there is one
            if (level < 7 && (!bHigherCellTested || length(texc - texc_out_of_higher_cell) < 1e-4f))
            {
                cell_size *= 2.f;
                level++;

                bHigherCellTested = false;
            }

            // Go to the outer limit of the tested cell
            texc = next_texc;

            // Are we out of the screen ?
            if (texc.x * (1.f - texc.x) <= 0.f || texc.y * (1.f - texc.y) <= 0.f)
            {
                HitPoint = 0.f.xxx;
                return false;
            }

            // Update target level
            targetLevel = 0;//uint(ComputeMipLevel(Roughness, length(Pos + RayLength * Dir - Eye.xyz), RayLength));
        }

        // Compute the maximum depth of the ray within the cell
        next_texc   = ComputeCoordsLeavingCell(texc, cell_size, u);
        RayDepth    = ComputeRayDepth(next_texc, Texc, p.zw, r.zw, scale, RayLength);
    }

    HitPoint = 0.f.xxx;
    return false;
}

//---------------------------------------------




layout (local_size_x = 8, local_size_y = 8, local_size_z = 1) in;
void main(void)
{
	float fZDist	= 0.f;

	vec3	pos		= Unpack_Pos(fZDist);

	vec4 raydata	= imageLoad(RayData, ivec2(gl_GlobalInvocationID.xy));

	if (raydata.w > 0.f)
	{
		vec2 texcoords = (gl_GlobalInvocationID.xy + 0.5f) / Size;

		vec3 HitPoint = 0.f.xxx;

		if (fZDist < 1.f && RayTrace(pos, raydata.xyz, texcoords, raydata.w, 128, HitPoint))
			imageStore(RayData, ivec2(gl_GlobalInvocationID.xy), vec4(HitPoint, raydata.w));

		else
			imageStore(RayData, ivec2(gl_GlobalInvocationID.xy), vec4(raydata.xyz, -raydata.w));
	}
}
