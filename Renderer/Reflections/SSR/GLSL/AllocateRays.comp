// shadertype=glsl

#version 450


uniform layout(rgba16f, binding = 0) image2D RayData;


layout (location = 0) uniform sampler2D ZMap;
layout (location = 1) uniform sampler2D NormalMap;
layout (location = 2) uniform sampler2D InfoMap;


layout(std140) uniform cb0
{
	mat4 InvViewProj;
	vec4 Eye;
};


float RadicalInverse(uint k, uint p)
{
	uint p1 = p;
	uint k1 = k;
	float phi = 0.f;

	while (k1 > 0)
	{
		phi += (k1 % p) / float(p1);
		k1 /= p;
		p1 *= p;
	}

	return phi;
}


float radicalInverse_VdC(uint inBits) 
{
	uint bits = inBits;
    bits = (bits << 16U) | (bits >> 16U);
    bits = ((bits & 0x55555555U) << 1U) | ((bits & 0xAAAAAAAAU) >> 1U);
    bits = ((bits & 0x33333333U) << 2U) | ((bits & 0xCCCCCCCCU) >> 2U);
    bits = ((bits & 0x0F0F0F0FU) << 4U) | ((bits & 0xF0F0F0F0U) >> 4U);
    bits = ((bits & 0x00FF00FFU) << 8U) | ((bits & 0xFF00FF00U) >> 8U);
    return float(bits) * 2.3283064365386963e-10;
}



vec2 Halton_2_3(uint i)
{
	 return vec2(radicalInverse_VdC(i), RadicalInverse(i, 3U));
}


uint wang_hash(uint seed)
{
    seed = (seed ^ 61) ^ (seed >> 16);
    seed *= 9;
    seed = seed ^ (seed >> 4);
    seed *= 0x27d4eb2d;
    seed = seed ^ (seed >> 15);
    return seed;
}



vec3 ImportanceSampleGGX( vec2 Xi, float roughness, vec3 N, out float pdf )
{
	float a = roughness;
    float Phi = 2 * 3.141592f * Xi.x;
    float CosTheta = sqrt( max(0.f, (1 - Xi.y) / max(1e-6f, 1 + (a*a - 1) * Xi.y )) );
    float SinTheta = sqrt( max(0.f, 1 - CosTheta * CosTheta) );
    vec3 H;

    H.x = SinTheta * cos( Phi );
    H.y = SinTheta * sin( Phi );
    H.z = CosTheta;

    vec3 UpVector = abs(N.z) < 0.999 ? vec3(0,0,1) : vec3(1,0,0);
    vec3 TangentX = normalize( cross( UpVector, N ) );
    vec3 TangentY = cross( N, TangentX );

	pdf = (a * a - 1) * CosTheta * CosTheta + 1.f;

	pdf = a * a * CosTheta * SinTheta / (3.1415926f * pdf * pdf);

    // Tangent to world space
	return TangentX * H.x + TangentY * H.y + N * H.z;
}



layout (local_size_x = 8, local_size_y = 8, local_size_z = 1) in;
void main( void )
{
	float Z = texelFetch(ZMap, ivec2(gl_GlobalInvocationID.xy * 2), 0).r * 2.f - 1.f;

	if (Z == 1.f)
	{
		imageStore(RayData, ivec2(gl_GlobalInvocationID.xy), -1.f.xxxx);
	}

	else
	{
		ivec2 size = textureSize(ZMap, 0);
		vec2 texcoords = (2.f * gl_GlobalInvocationID.xy) / size;

		vec4 pos = InvViewProj * vec4(texcoords * 2.f - 1.f, Z, 1.f);
		pos.xyz /= pos.w;

		vec3 view = normalize(Eye.xyz - pos.xyz);

		vec3 normal = normalize(texelFetch(NormalMap, ivec2(gl_GlobalInvocationID.xy * 2), 0).xyz * 2.f - 1.f);

		float roughness = texelFetch(InfoMap, ivec2(gl_GlobalInvocationID.xy * 2).xy, 0).g;
		roughness *= roughness;

		uint seed = wang_hash(gl_GlobalInvocationID.y * gl_NumWorkGroups.x * gl_WorkGroupSize.x + gl_GlobalInvocationID.x) + uint(Eye.w);

		vec2 Xi = Halton_2_3(seed);
		float pdf = 0.f;

		vec3 h = ImportanceSampleGGX(Xi, roughness, normal, pdf);

		vec3 raydir = reflect(-view, h);
		uint count = 0;

		while (dot(normal, raydir) < 0.f && count < 20)
		{
			Xi = Halton_2_3(seed + 1);
			h = ImportanceSampleGGX(Xi, roughness, normal, pdf);
			raydir = reflect(-view, h);
			count++;
		}

		imageStore(RayData, ivec2(gl_GlobalInvocationID.xy), vec4(raydir, dot(normal, raydir)));
	}
}
