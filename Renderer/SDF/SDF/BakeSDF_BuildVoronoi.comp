#version 450

layout(binding = 0, rgba16ui) uniform readonly restrict uimage3D	InputTex;
layout(binding = 1, rgba16ui) uniform writeonly restrict uimage3D	OutputTex;

layout(push_constant) uniform pc0
{
	vec3	Size;
	float	offset;	
};


uvec3 packPosition(vec3 pos)
{
	return uvec3(pos * 65535.f / Size.xyz);
}


vec3 unpackPosition(uvec3 p)
{
	return Size.xyz * p * (1.f / 65535.f);
}


layout(local_size_x = 8, local_size_y = 8, local_size_z = 8) in;
void main() 
{
	ivec3 size = imageSize(OutputTex).xyz;

	if (gl_GlobalInvocationID.x < size.x && gl_GlobalInvocationID.y < size.y && gl_GlobalInvocationID.z < size.z)
	{
		vec3 pos = ((gl_GlobalInvocationID + 0.5f) / size) * Size;

		uvec4 optP = 0u.xxxx;

		float d2 = 1e8f;

		optP.w = imageLoad(InputTex, ivec3(gl_GlobalInvocationID)).w;

		for (int i = -1; i <= 1; i++)
			for (int j = -1; j <= 1; j++)
				for (int k = -1; k <= 1; k++)
				{
					ivec3 sampleCoord = ivec3(gl_GlobalInvocationID) + ivec3(i, j, k) * int(offset);

					if (sampleCoord.x >= 0 && sampleCoord.x < size.x && sampleCoord.y >= 0 && sampleCoord.y < size.y && sampleCoord.z >= 0 && sampleCoord.z < size.z)
					{
						uvec4 p = imageLoad(InputTex, sampleCoord);

						if ((p.x + p.y + p.z) != 0u)
						{
							vec3 point = unpackPosition(p.xyz);

							precise float d = dot(point.xyz - pos, point.xyz - pos);

							if (d < d2)
							{
								d2 = d;
								optP.xyz = p.xyz;
							}
						}
					}
				}

		imageStore(OutputTex, ivec3(gl_GlobalInvocationID), optP);
	}
}

