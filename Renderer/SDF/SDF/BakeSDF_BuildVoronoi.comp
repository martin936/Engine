#version 450

layout(binding = 0, r32ui) uniform readonly restrict uimage3D	InputTex;
layout(binding = 1, r32ui) uniform writeonly restrict uimage3D	OutputTex;

layout(push_constant) uniform pc0
{
	vec3	Size;
	float	offset;	
};


vec3 unpackPosition(uint p)
{
	return Size.xyz * vec3(p & 0x3ff, (p >> 10u) & 0x3ff, (p >> 20u) & 0x3ff) * (1.f / 1024.f);
}


layout(local_size_x = 8, local_size_y = 8, local_size_z = 8) in;
void main() 
{
	ivec3 size = imageSize(OutputTex).xyz;

	if (gl_GlobalInvocationID.x < size.x && gl_GlobalInvocationID.y < size.y && gl_GlobalInvocationID.z < size.z)
	{
		vec3 pos = ((gl_GlobalInvocationID + 0.5f) / size) * Size;

		uint optP = 0u;

		float d2 = 1e8f;

		uint data = imageLoad(InputTex, ivec3(gl_GlobalInvocationID.xyz)).x & (1u << 30u);

		for (int i = -1; i <= 1; i++)
			for (int j = -1; j <= 1; j++)
				for (int k = -1; k <= 1; k++)
				{
					ivec3 sampleCoord = ivec3(gl_GlobalInvocationID) + ivec3(i, j, k) * int(offset);

					if (sampleCoord.x >= 0 && sampleCoord.x < size.x && sampleCoord.y >= 0 && sampleCoord.y < size.y && sampleCoord.z >= 0 && sampleCoord.z < size.z)
					{
						uint p = imageLoad(InputTex, sampleCoord).x;

						if ((p & (1 << 31u)) != 0u)
						{
							vec3 point = unpackPosition(p);

							precise float d = dot(point.xyz - pos, point.xyz - pos);

							if (d < d2)
							{
								d2 = d;
								optP = p;
							}
						}
					}
				}

		optP &= ~(1u << 30u);
		optP |= data;

		imageStore(OutputTex, ivec3(gl_GlobalInvocationID), optP.xxxx);
	}
}

