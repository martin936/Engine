#version 450

layout(binding = 0, rgba16ui) uniform readonly restrict		uimage3D	InputTex;
layout(binding = 1, rgba16ui) uniform writeonly restrict	uimage3D	OutputTex;

layout(push_constant) uniform pc0
{
	vec3	Size;
	float	offset;	
};


layout(local_size_x = 8, local_size_y = 8, local_size_z = 8) in;
void main() 
{
	ivec3 GridSize = imageSize(OutputTex).xyz;

	if (gl_GlobalInvocationID.x < GridSize.x && gl_GlobalInvocationID.y < GridSize.y && gl_GlobalInvocationID.z < GridSize.z)
	{
		vec3 wP = (vec3(gl_GlobalInvocationID) / vec3(GridSize.xyz) - 0.5f) * Size.xyz;

		float d2 = 1e8f;
		uvec3 pos = 0xffffffffu.xxx;

		for (int i = -1; i <= 1; i++)
			for (int j = -1; j <= 1; j++)
				for (int k = -1; k <= 1; k++)
				{
					ivec3 sampleCoord = ivec3(gl_GlobalInvocationID) + ivec3(i, j, k) * int(offset);

					if (sampleCoord.x >= 0 && sampleCoord.x < GridSize.x && sampleCoord.y >= 0 && sampleCoord.y < GridSize.y && sampleCoord.z >= 0 && sampleCoord.z < GridSize.z)
					{
						uvec3 sampleP = imageLoad(InputTex, sampleCoord).rgb;

						if (sampleP.x == 0xffffffffu)
							continue;

						vec3 wPs = (vec3(sampleP) / vec3(GridSize.xyz) - 0.5f) * Size.xyz;

						float d2sample = dot(wPs - wP, wPs - wP);

						if (d2sample < d2)
						{
							d2 = d2sample;
							pos = sampleP;
						}
					}
				}

		imageStore(OutputTex, ivec3(gl_GlobalInvocationID), uvec4(pos, 0));
	}
}

