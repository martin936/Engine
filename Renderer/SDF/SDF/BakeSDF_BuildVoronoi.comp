#version 450

layout(binding = 0, rgba32f) uniform readonly restrict image3D	InputTex;
layout(binding = 1, rgba32f) uniform writeonly restrict image3D OutputTex;

layout(push_constant) uniform pc0
{
	vec3	Size;
	float	offset;	
};


layout(local_size_x = 8, local_size_y = 8, local_size_z = 8) in;
void main() 
{
	ivec3 size = imageSize(OutputTex).xyz;

	if (gl_GlobalInvocationID.x < size.x && gl_GlobalInvocationID.y < size.y && gl_GlobalInvocationID.z < size.z)
	{
		vec3 pos = ((gl_GlobalInvocationID + 0.5f) / size) * Size;

		vec4 optP = 0.f.xxxx;
		optP.w = uintBitsToFloat(0);

		float d2 = 1e8f;

		for (int i = -1; i <= 1; i++)
			for (int j = -1; j <= 1; j++)
				for (int k = -1; k <= 1; k++)
				{
					ivec3 sampleCoord = ivec3(gl_GlobalInvocationID) + ivec3(i, j, k) * int(offset);

					if (sampleCoord.x >= 0 && sampleCoord.x < size.x && sampleCoord.y >= 0 && sampleCoord.y < size.y && sampleCoord.z > 0 && sampleCoord.z < size.z)
					{
						vec4 p = imageLoad(InputTex, sampleCoord);

						if (floatBitsToUint(p.w) != 0)
						{
							float d = dot(p.xyz - pos, p.xyz - pos);

							if (d < d2)
							{
								d2 = d;
								optP = p;
							}
						}
					}
				}

		imageStore(OutputTex, ivec3(gl_GlobalInvocationID), optP);
	}
}

