#version 450

layout(binding = 0, rg32ui)	uniform readonly restrict uimage3D	VoronoiTex;
layout(binding = 1, r16f)	uniform writeonly restrict image3D	SDFTex;
layout(binding = 2, rgba8)	uniform image3D						VolumeAlbedo;


layout(push_constant) uniform pc0
{
	vec4 Size;
};


// Returns ±1
vec2 signNotZero(vec2 v)
{
	return vec2((v.x >= 0.0) ? +1.0 : -1.0, (v.y >= 0.0) ? +1.0 : -1.0);
}

// Assume normalized input. Output is on [-1, 1] for each component.
vec2 EncodeOct(in vec3 v)
{
	// Project the sphere onto the octahedron, and then onto the xy plane
	vec2 p = v.xy * (1.0 / (abs(v.x) + abs(v.y) + abs(v.z)));
	// Reflect the folds of the lower hemisphere over the diagonals
	return ((v.z <= 0.0) ? ((1.0 - abs(p.yx)) * signNotZero(p)) : p) * 0.5f + 0.5f.xx;
}

vec3 DecodeOct(in vec2 e)
{
	e = e * 2.f - 1.f;
	vec3 v = vec3(e.xy, 1.0 - abs(e.x) - abs(e.y));
	if (v.z < 0) v.xy = (1.0 - abs(v.yx)) * signNotZero(v.xy);
	return normalize(v);
}


uvec3 packPosition(vec3 pos)
{
	return uvec3(pos * 65535.f / Size.xyz);
}


vec3 unpackPosition(uvec3 p)
{
	return Size.xyz * p * (1.f / 65535.f);
}


layout(local_size_x = 8, local_size_y = 8, local_size_z = 8) in;
void main() 
{
	ivec3 size = imageSize(VoronoiTex).xyz;

	if (gl_GlobalInvocationID.x < size.x && gl_GlobalInvocationID.y < size.y && gl_GlobalInvocationID.z < size.z)
	{
		precise vec3 cellPos		= ((gl_GlobalInvocationID + 0.5f) / size) * Size.xyz;
		uvec4 nearestPoint			= imageLoad(VoronoiTex, ivec3(gl_GlobalInvocationID));

		ivec3 coords = ivec3(nearestPoint.xyz * size / 65535);

		vec3 cellSize = Size.xyz / size;

		vec3 point = unpackPosition(nearestPoint.xyz);

		precise float d = distance(cellPos, point);

		if ((nearestPoint.w & 128) != 0u)
			d *= -1.f;

		imageStore(SDFTex,		ivec3(gl_GlobalInvocationID),	vec4(d));
		imageStore(VolumeAlbedo, ivec3(gl_GlobalInvocationID),	imageLoad(VolumeAlbedo, coords));
	}
}

