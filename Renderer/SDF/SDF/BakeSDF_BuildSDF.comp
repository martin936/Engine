#version 450

layout(binding = 0, r32ui)	uniform readonly restrict uimage3D	VoronoiTex;
layout(binding = 1, r32ui)	uniform readonly restrict uimage3D	NarrowBand;
layout(binding = 2, r32ui)	uniform readonly restrict uimage3D	NarrowBandSign;
layout(binding = 3, r16f)	uniform writeonly restrict image3D	SDFTex;
layout(binding = 4, rgba8)	uniform image3D						VolumeAlbedo;


layout(push_constant) uniform pc0
{
	vec4 Size;
};


vec3 unpackPosition(uint p)
{
	return Size.xyz * vec3(p & 0x3ff, (p >> 10u) & 0x3ff, (p >> 20u) & 0x3ff) * (1.f / 1024.f);
}


layout(local_size_x = 8, local_size_y = 8, local_size_z = 8) in;
void main() 
{
	ivec3 size = imageSize(VoronoiTex).xyz;

	if (gl_GlobalInvocationID.x < size.x && gl_GlobalInvocationID.y < size.y && gl_GlobalInvocationID.z < size.z)
	{
		precise vec3 cellPos		= ((gl_GlobalInvocationID + 0.5f) / size) * Size.xyz;

		uint narrowDist				= imageLoad(NarrowBand, ivec3(gl_GlobalInvocationID.xyz)).x;
		uint nearestPoint			= imageLoad(VoronoiTex, ivec3(gl_GlobalInvocationID)).x;

		vec3 point = unpackPosition(nearestPoint);

		ivec3 coords = ivec3((point / Size.xyz) * size);

		precise float d;

		if (narrowDist != 0xffffffffu)
		{
			d = (narrowDist * (1.f / 4294967295.f)) * max(Size.x, max(Size.y, Size.z));
			uint s = imageLoad(NarrowBandSign, ivec3(gl_GlobalInvocationID.xyz)).x;

			if (s == 0)
				d *= -1;
		}

		else
		{
			d = distance(cellPos, point);
			imageStore(VolumeAlbedo, ivec3(gl_GlobalInvocationID),	imageLoad(VolumeAlbedo, coords));
		}

		imageStore(SDFTex,		ivec3(gl_GlobalInvocationID),	vec4(d));
	}
}

