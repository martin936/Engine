#version 450
#extension GL_GOOGLE_include_directive : require

#include "../../Lights/GLSL/Clustered.glsl"

layout(binding = 0)	uniform texture2D	ZMap;
layout(binding = 1) uniform texture3D	ScatteredLight;
layout(binding = 2) uniform sampler		sampLinear;

layout(binding = 3, rgba16f) uniform writeonly image2D IntegratedLight;


layout(push_constant) uniform pc0
{
	float Near;
	float Far;
};


shared vec4 LightSegment[8][8][8];


layout(local_size_x = 8, local_size_y = 8, local_size_z = 8) in;
void main(void)
{
	float fZDist = texelFetch(ZMap, ivec2(gl_GlobalInvocationID.xy), 0).r;
    float ZCurr = 2.f * Near * Far / (Far + Near  + (fZDist * 2.f - 1.f) * (Far - Near));

	vec2 size = imageSize(IntegratedLight).xy;
	float texDepth = textureSize(ScatteredLight, 0).z;

	float vis = 1.f;
	vec3 color = 0.f.xxx;

	uint numSlices = uint(texDepth / 8);
	vec2 Texcoords = (gl_GlobalInvocationID.xy + 0.5f) / size.xy;

    for (int i = 0; i < numSlices; i++)
	{
		float ZCellMin = (gl_GlobalInvocationID.z * 8 + i) / texDepth;
        float ZCellMax = (gl_GlobalInvocationID.z * 8 + i + 1.f) / texDepth;

        float ZDistMin	= (Near + DISTRIB_OFFSET) * pow((Far + DISTRIB_OFFSET) / (Near + DISTRIB_OFFSET), ZCellMin) - DISTRIB_OFFSET;
        float ZDistMax	= (Near + DISTRIB_OFFSET) * pow((Far + DISTRIB_OFFSET) / (Near + DISTRIB_OFFSET), ZCellMax) - DISTRIB_OFFSET;

		if (ZCurr < ZDistMin)
			break;

		float ZCellSize = min(ZCurr - ZDistMin, ZDistMax - ZDistMin);
		float ZDist = min(ZCurr, ZDistMax);

		vec4 S = textureLod(sampler3D(ScatteredLight, sampLinear), vec3(Texcoords, (gl_GlobalInvocationID.z * 8 + i + 0.5f) / texDepth), 0);
		float sigma_t = 1e-2f * S.a;

		S.rgb *= ZCellSize;

        color += S.rgb * clamp((1.f - exp(-ZDist * sigma_t)) / max(1e-8f, sigma_t), 0.f, ZDist);
        vis *= exp(-ZCellSize * sigma_t);
    }

	LightSegment[gl_LocalInvocationID.z][gl_LocalInvocationID.y][gl_LocalInvocationID.x] = vec4(color, vis);

	memoryBarrierShared();
	barrier();

	vis = 1.f;
	color = 0.f.xxx;

	if (gl_LocalInvocationID.z == 0)
	{
		for (int i = 0; i < 8; i++)
		{
			vec4 S = LightSegment[i][gl_LocalInvocationID.y][gl_LocalInvocationID.x];
			color += S.rgb;
			vis *= S.a;
		}

		imageStore(IntegratedLight, ivec2(gl_GlobalInvocationID.xy), vec4(5e-6f * color, vis));
	}
}

