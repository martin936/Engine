#version 450
#extension GL_EXT_samplerless_texture_functions : require
#extension GL_GOOGLE_include_directive : require

#define SDF_CB_SLOT				5
#define SDF_TEX_SLOT			0

#include "../../Lights/GLSL/SDF.glsl"

layout(push_constant) uniform pc0
{
	vec4 Center;
	vec4 Size;
};

layout(binding = 1)			uniform sampler							sampLinear;
layout(binding = 2)			uniform itexture2DArray					probeMetadata;
layout(binding = 3, rgba8)	uniform writeonly restrict image3D		occlusionData0;
layout(binding = 4, rgba8)	uniform writeonly restrict image3D		occlusionData1;



vec3 GetProbePos(in ivec3 coords, out bool enabled)
{
	ivec3 numProbes = textureSize(probeMetadata, 0).xyz;

	vec3 cellCenter = Center.xyz + vec3((coords.x + 0.5f) / numProbes.x - 0.5f, (coords.y + 0.5f) / numProbes.y - 0.5f, (coords.z + 0.5f) / numProbes.z - 0.5f) * Size.xyz;
	vec3 cellSize	= 0.5f * Size.xyz / numProbes;

	ivec4 probeData = texelFetch(probeMetadata, coords, 0);
	vec3 relativePos = probeData.xyz * (1.f / 127.f);

	enabled = ((probeData.w & 1) == 1);

	return cellCenter + cellSize * relativePos;
}


float VanDerCorput2(uint inBits)
{
	uint bits = inBits;
	bits = (bits << 16U) | (bits >> 16U);
	bits = ((bits & 0x55555555U) << 1U) | ((bits & 0xAAAAAAAAU) >> 1U);
	bits = ((bits & 0x33333333U) << 2U) | ((bits & 0xCCCCCCCCU) >> 2U);
	bits = ((bits & 0x0F0F0F0FU) << 4U) | ((bits & 0xF0F0F0F0U) >> 4U);
	bits = ((bits & 0x00FF00FFU) << 8U) | ((bits & 0xFF00FF00U) >> 8U);
	return bits * 2.3283064365386963e-10f;
}


float VanDerCorput3(uint inBits)
{
	float f = 1.f;
	float r = 0.f;
	uint i = inBits;

	while (i > 0)
	{
		f /= 3.f;
		r += f * (i % 3U);
		i /= 3;
	}

	return r;
}


layout (local_size_x = 4, local_size_y = 4, local_size_z = 4) in;
void main(void)
{
	ivec3 numProbes = textureSize(probeMetadata, 0).xyz;

	vec3 coords = vec3(gl_GlobalInvocationID.xyz + 0.5f) / imageSize(occlusionData0).xyz;

	vec3 pos = (coords - 0.5f) * Size.xyz + Center.xyz;

	vec3 st = coords * numProbes - 0.5f.xxx;

	ivec3	iuv = ivec3(floor(st));
	vec3	fuv = fract(st);

	vec4	occlusion0 = 0.f.xxxx;
	vec4	occlusion1 = 0.f.xxxx;

	vec3 cell = Size.xyz / imageSize(occlusionData0);

	for (uint id = 0U; id < 8U; id++)
	{
		ivec3 puv = clamp(iuv + ivec3(id & 1U, (id >> 1U) & 1U, id >> 2U), ivec3(0), numProbes - ivec3(1));

		bool enabled;
		vec3 probePos	= GetProbePos(puv, enabled);
		vec3 dir = normalize(probePos - pos);

		if (isnan(dir.x) || isinf(dir.x))
			dir = 0.f.xxx;

		if (!enabled)
			continue;

		float vis = 0.f;
		uint w = 0u;

		for (uint i = 0; i < 1; i++)
		{
			vec3 param = pos + cell * (vec3(VanDerCorput2(i+1), VanDerCorput3(i+1), (i + 0.5f) * (1.f / 1.f)) - 0.5f);

			float v = SampleSDFVisibilityTargetFromProbe(sampLinear, param, probePos);

			vis += max(0.f, v);

			if (v >= 0.f)
				w++;
		}

		vis /= max(1, w);

		vec4 data;
		if ((puv.z & 1u) == 0u)
            data = occlusion0;
        else
            data = occlusion1;

		if ((puv.y & 1u) == 0u)
		{
			if ((puv.x & 1u) == 0u)
				data.r = vis;
			else
				data.g = vis;
		}

		else
		{
			if ((puv.x & 1u) == 0u)
				data.b = vis;
			else
				data.a = vis;
		}

		if ((puv.z & 1u) == 0u)
			occlusion0 = data;
		else
			occlusion1 = data;
	}

	imageStore(occlusionData0, ivec3(gl_GlobalInvocationID), occlusion0);
	imageStore(occlusionData1, ivec3(gl_GlobalInvocationID), occlusion1);
}
