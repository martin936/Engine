#version 450
#extension GL_EXT_samplerless_texture_functions : require
#extension GL_GOOGLE_include_directive : require

#define SDF_CB_SLOT				5
#define SDF_TEX_SLOT			0

#include "../../Lights/GLSL/SDF.glsl"
#include "../../Lights/GLSL/Lighting.glsl"


layout(binding = 6, std140) uniform cb6
{
	mat4	m_View;
	mat4	m_Proj;
	mat4	m_ViewProj;
	mat4	m_InvView;
	mat4	m_InvViewProj;

	mat4	m_LastView;
	mat4	m_LastProj;
	mat4	m_LastViewProj;
	mat4	m_LastInvView;
	mat4	m_LastInvViewProj;

	vec4	m_Eye;
};


layout(binding = 1) uniform sampler			sampLinear;
layout(binding = 2) uniform texture2D		DepthMap;
layout(binding = 3) uniform texture2D		NormalMap;

layout(binding = 4, r16f) uniform restrict writeonly image2D	RayLength;


vec3 DecodeNormal(in vec3 e) 
{
	e = e * 2.f - 1.f;
	
	vec2 temp = vec2(e.x + e.y, e.x - e.y) * 0.5;
	vec3 v = vec3(temp, 1.0 - abs(temp.x) - abs(temp.y));

	return normalize(v) * sign(e.z);
}


layout (local_size_x = 8, local_size_y = 8, local_size_z = 1) in;
void main(void)
{
	ivec2 size = textureSize(DepthMap, 0).xy;

	if (gl_GlobalInvocationID.x < size.x && gl_GlobalInvocationID.y < size.y)
	{
		vec2 Texcoords = vec2(gl_GlobalInvocationID.xy) / size;
		Texcoords.y = 1.f - Texcoords.y;

		float depth = texelFetch(DepthMap, ivec2(gl_GlobalInvocationID.xy), 0).r;

		float rayLength = -1.f;

		if (depth > 0.f)
		{
			vec4 normalTex = texelFetch(NormalMap, ivec2(gl_GlobalInvocationID), 0);

			vec3 normal = DecodeNormal(normalTex.rga);
			float roughness = normalTex.b * normalTex.b;

			//if (roughness < 0.5f)
			{
				vec4 pos = m_InvViewProj * vec4(Texcoords.xy * vec2(2.f, 2.f) - vec2(1.f, 1.f), depth, 1.f);
				pos /= pos.w;			

				vec3 view = normalize(pos.xyz - m_Eye.xyz);

				vec3 r = reflect(view, normal);		

				if (!RayMarchSDF(sampLinear, pos.xyz, r, rayLength))
					rayLength = -1;
			}
		}
		
		imageStore(RayLength, ivec2(gl_GlobalInvocationID.xy), rayLength.xxxx);
	}
}
