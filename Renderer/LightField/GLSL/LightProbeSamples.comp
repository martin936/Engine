#version 450
#extension GL_EXT_samplerless_texture_functions : require
#extension GL_GOOGLE_include_directive : require

#define SDF_CB_SLOT				19
#define SDF_TEX_SLOT			0
#define VOLUME_ALBEDO_TEX_SLOT	1

#include "../../Lights/GLSL/SDF.glsl"
#include "../../Lights/GLSL/Lighting.glsl"

layout (binding = 20, std140) uniform cb20
{
	SLight lightData[128];
};


layout (binding = 21, std140) uniform cb21
{
	SLightShadow shadowLightData[128];
};


layout (binding = 22, std140) uniform cb22
{
	mat4 SunShadowMatrix;
	vec4 SunColor;
	vec4 SunDir;
};


layout(binding = 23, std140) uniform cb23
{
	vec4 m_Offsets[128];
};


layout(push_constant) uniform pc0
{
	vec4 Center0;
	vec4 Size0;

	vec4 Center1;
	vec4 Size1;

	vec4 Params;
};

#define SkyLightIntensity	(Params.x)
#define Near				(Params.y)
#define Far					(Params.z)
#define Cascade				int(Params.w)


layout(binding = 2) uniform sampler				sampLinear;
layout(binding = 3) uniform itexture2DArray		probeMetadataFine;
layout(binding = 4) uniform itexture2DArray		probeMetadataCoarse;
layout(binding = 5) uniform texture2DArray		SurfelDist;
layout(binding = 6) uniform utexture3D			LightListPtr;

layout(binding = 7, std430) readonly buffer buf1
{
	uint	dummy;
	uint	LightIndices[];
};

layout(binding = 8) uniform texture2DArray		ShadowMaps;
layout(binding = 9) uniform texture2DArray		SunShadowMap;
layout(binding = 10) uniform sampler			sampShadow;
layout(binding = 11) uniform textureCube		Skybox;

#if FP16_IRRADIANCE_PROBES
layout(binding = 12) uniform texture2DArray		IrradianceTexFine;
#else
layout(binding = 12) uniform utexture2DArray	IrradianceTexFine;
#endif

layout(binding = 13) uniform texture3D			ProbeOcclusionFine0;
layout(binding = 14) uniform texture3D			ProbeOcclusionFine1;

#if FP16_IRRADIANCE_PROBES
layout(binding = 15) uniform texture2DArray		IrradianceTexCoarse;
#else
layout(binding = 15) uniform utexture2DArray	IrradianceTexCoarse;
#endif

layout(binding = 16) uniform texture3D			ProbeOcclusionCoarse0;
layout(binding = 17) uniform texture3D			ProbeOcclusionCoarse1;

layout(binding = 18, r32ui) uniform restrict writeonly uimage2DArray	SampleIrradiance;


vec3 GetProbePos(itexture2DArray probeMetadata, vec3 Center, vec3 Size, ivec3 coords, out bool enabled)
{
	ivec3 size = textureSize(probeMetadata, 0).xyz;

	vec3 cellCenter = Center.xyz + vec3((coords.x + 0.5f) / size.x - 0.5f, (coords.y + 0.5f) / size.y - 0.5f, (coords.z + 0.5f) / size.z - 0.5f) * Size.xyz;
	vec3 cellSize	= 0.5f * Size.xyz / size;

	ivec4 probeData = texelFetch(probeMetadata, coords, 0);
	vec3 relativePos = probeData.xyz * (1.f / 127.f);

	enabled = (probeData.w & 1) == 1;

	return cellCenter + cellSize * relativePos;
}


vec3 GetProbePos(in ivec3 coords, out bool enabled)
{
	if (Cascade == 0)
		return GetProbePos(probeMetadataFine, Center0.xyz, Size0.xyz, coords, enabled);

	else
		return GetProbePos(probeMetadataCoarse, Center1.xyz, Size1.xyz, coords, enabled);
}



void CascadeGI(out vec3 Diffuse, in vec3 pos, in vec3 normal)
{
	Diffuse		= 0.f.xxx;

	vec3 Center = Center0.xyz;
	vec3 Size	= Size0.xyz;

	vec3 giPos = (pos.xyz - Center.xyz) / Size.xyz + 0.5f.xxx;

	if (giPos.x * (1.f - giPos.x) > 0.f && giPos.y * (1.f - giPos.y) > 0.f && giPos.z * (1.f - giPos.z) > 0.f)
		Diffuse = ComputeGI(IrradianceTexFine, probeMetadataFine, ProbeOcclusionFine0, ProbeOcclusionFine1, sampLinear, pos, giPos, Center.xyz, Size.xyz, normal, 0.f.xxx) * (1.f / 3.1415926f);

	else
	{
		Center	= Center1.xyz;
		Size	= Size1.xyz;

		giPos = (pos.xyz - Center.xyz) / Size.xyz + 0.5f.xxx;

		if (giPos.x * (1.f - giPos.x) > 0.f && giPos.y * (1.f - giPos.y) > 0.f && giPos.z * (1.f - giPos.z) > 0.f)
			Diffuse = ComputeGI(IrradianceTexCoarse, probeMetadataCoarse, ProbeOcclusionCoarse0, ProbeOcclusionCoarse1, sampLinear, pos, giPos, Center.xyz, Size.xyz, normal, 0.f.xxx) * (1.f / 3.1415926f);
	}		
}



layout (local_size_x = 4, local_size_y = 4, local_size_z = 4) in;
void main(void)
{
	ivec3 numProbes;
	
	if (Cascade == 0)
		numProbes = textureSize(probeMetadataFine, 0).xyz;
	else
		numProbes = textureSize(probeMetadataCoarse, 0).xyz;

	ivec3 probeCoord = ivec3(gl_WorkGroupID.xy >> 4, gl_WorkGroupID.z) * 4 + ivec3(gl_LocalInvocationID); 

	if (probeCoord.x < numProbes.x && probeCoord.y < numProbes.y && probeCoord.z < numProbes.z)
	{
		bool enabled;
		vec3 probePos = GetProbePos(ivec3(probeCoord), enabled);
		
		if (!enabled)
			return;

		ivec2	rayCoords	= ivec2(gl_WorkGroupID.xy & 15);
		int		rayIndex	= rayCoords.y * 16 + rayCoords.x;

		vec2	octRay;

		if ((rayIndex & 1) == 0)
			octRay = m_Offsets[rayIndex >> 1].xy;
		else
			octRay = m_Offsets[rayIndex >> 1].zw;

		vec3	rayDir		= DecodeOct(octRay);
		float	rayLength	= texelFetch(SurfelDist, ivec3(probeCoord.xy * 16 + rayCoords, probeCoord.z), 0).r;

		vec3	sampleLight;

		if (rayLength > 0.f)
		{
			rayLength = 2.f * Near * Far / (Far + Near + (2.f * rayLength - 1.f) *  (Far - Near));

			vec3 pos	= probePos + rayLength * rayDir;
			vec3 normal = normalize(SDFGradient(sampLinear, pos));

			vec3 gridCoords = (pos - Center1.xyz) / Size1.xyz;
			gridCoords += vec3(0.5f);

			uvec3 gridSize = textureSize(LightListPtr, 0).xyz;

			ivec3 igridCoords = ivec3(gridCoords.xy * gridSize.xy + 0.5f, clamp(gridCoords.z * gridSize.z + 0.5f, 0U, gridCoords.z - 1));

			uint index				= texelFetch(LightListPtr, igridCoords, 0).r;
			uint numLights			= 0;//index == 0xffffffff ? 0 : LightIndices[index];
			index++;

			vec3 Diffuse;

			CascadeGI(Diffuse, pos.xyz, normal);

			if (SunColor.w > 0.f)
			{
				Diffuse += SunColor.rgb * SunColor.w * max(0.f, dot(-SunDir.xyz, normal)) * ComputeSunShadow(SunShadowMatrix, pos, SunShadowMap, sampShadow);
			}

			while (numLights > 0)
			{
				uint lightID		= LightIndices[index];

				if (lightID == subgroupMin(lightID))
				{
					vec3 l, Illuminance;

					SLight light;

					if ((lightID & (1 << 15)) == 0) 
						light = lightData[lightID];
					else
						light = shadowLightData[lightID & 0x7fff].m_light;

					ComputeLight(light, pos.xyz, normal, Illuminance, l);

					if ((lightID & (1 << 15)) != 0)
						Illuminance *= ComputeShadow(shadowLightData[lightID & 0x7fff], pos, ShadowMaps, sampShadow);

					Diffuse.rgb		+= Illuminance * (1.f / 3.1415926f);

					numLights--;
					index++;
				}
			}

			vec4 albedo = GetVolumeAlbedo(sampLinear, pos);
			sampleLight = (Diffuse + albedo.w) * albedo.rgb;
		}

		else
			sampleLight = SkyLightIntensity * texture(samplerCube(Skybox, sampLinear), vec3(-rayDir.x, rayDir.z, -rayDir.y)).rgb;

		probeCoord	= ivec3(gl_WorkGroupID.xy >> 4, gl_WorkGroupID.z) * 4 + ivec3(gl_LocalInvocationID); 
		rayCoords	= ivec2(gl_WorkGroupID.xy & 15);

		imageStore(SampleIrradiance, ivec3(probeCoord.xy * 16 + rayCoords, probeCoord.z), packUnorm4x8(ToRGBE(sampleLight)).xxxx);
	}
}
