#version 450


layout(binding = 0, std430) restrict coherent buffer buf0
{
	uint	nextAddrIndex;
	uvec2	IndexNodes[];
};

layout(binding = 1, r32ui) uniform uimage3D LightIndexPtr;


layout(binding = 2, std430) coherent buffer buf1
{
	uint	nextSortedAddrIndex;
	uint	SortedIndices[];
};


uint AllocateIndices(uint count)
{
	return atomicAdd(nextSortedAddrIndex, count + 1);
}


uint ExtractMinNode(uint head)
{
	uint ptr = head;
	uint last = 0xffffffff;

	uint minId = 0xffff;
	uint prev = 0xffffffff;
	uint next;
	uint addr = head;

	while (ptr != 0xffffffff)
	{
		uvec2 node = IndexNodes[ptr];

		if (node.x < minId)
		{
			minId = node.x;
			prev = last;
			next = node.y;
			addr = ptr;
		}

		last = ptr;
		ptr = node.y;
	}

	if (prev != 0xffffffff)
		IndexNodes[prev].y = next;

	return addr;
}


void WriteIndices(uint numLights, uint addr, uint head)
{
	uint ptr = head;

	SortedIndices[addr] = numLights;
	addr++;

	while (ptr != 0xffffffff)
	{
		uint minAddr = ExtractMinNode(ptr);

		if (minAddr == ptr)
			ptr = IndexNodes[ptr].y;

		SortedIndices[addr] = IndexNodes[minAddr].x;
		addr++;
	}
}


layout (local_size_x = 8, local_size_y = 8, local_size_z = 8) in;
void main(void)
{
	uvec3 size = imageSize(LightIndexPtr);

	if (gl_GlobalInvocationID.x < size.x && gl_GlobalInvocationID.y < size.y && gl_GlobalInvocationID.z < size.z)
	{
		uint head = imageLoad(LightIndexPtr, ivec3(gl_GlobalInvocationID.xyz)).r;

		if (head != 0xffffffff)
		{
			uvec2 node = IndexNodes[head];
			uint numLights = node.x;

			if (numLights > 0)
			{
				uint addr = AllocateIndices(numLights);

				WriteIndices(numLights, addr, node.y);

				imageStore(LightIndexPtr, ivec3(gl_GlobalInvocationID.xyz), uvec4(addr, 0, 0, 0));
			}

			else
				imageStore(LightIndexPtr, ivec3(gl_GlobalInvocationID.xyz), uvec4(0xffffffff, 0, 0, 0));
		}
	}
}
