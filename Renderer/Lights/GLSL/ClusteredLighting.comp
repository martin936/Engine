#version 450
#extension GL_GOOGLE_include_directive : require
#extension GL_EXT_nonuniform_qualifier : require

#include "Lighting.glsl"
//#include "Clustered.glsl"


layout (binding = 10, std140) uniform cb10
{
	mat4	m_View;
	mat4	m_Proj;
	mat4	m_ViewProj;
	mat4	m_InvView;
	mat4	m_InvViewProj;

	mat4	m_LastView;
	mat4	m_LastProj;
	mat4	m_LastViewProj;
	mat4	m_LastInvView;
	mat4	m_LastInvViewProj;

	vec4	m_Eye;
};


layout (binding = 11, std140) uniform cb11
{
	SLight lightData[128];
};


layout (binding = 12, std140) uniform cb12
{
	SLightShadow shadowLightData[128];
};


layout(push_constant) uniform pc0
{
	uvec2	screenSize;
	vec3	SunColor;
	float	Near;
	vec3	SunDir;
	float	Far;
};


layout(binding = 0) uniform utexture3D			LightListPtr;

layout(binding = 1, std430) readonly buffer buf1
{
	uint	dummy;
	uint	LightIndices[];
};

layout(binding = 2) uniform texture2D			ZBuffer;
layout(binding = 3) uniform texture2D			AlbedoTex;
layout(binding = 4) uniform texture2D			NormalTex;
layout(binding = 5) uniform texture2D			InfoTex;
layout(binding = 6) uniform texture2DArray		FilteredShadows;
layout(binding = 7) uniform sampler				sampLinear;

layout(binding = 8, r11f_g11f_b10f) uniform restrict writeonly image2D OutputIrradiance;
layout(binding = 9, r11f_g11f_b10f) uniform restrict writeonly image2D OutputSpecular;


vec3 DecodeNormal(in vec3 e) 
{
	e = e * 2.f - 1.f;
	
	vec2 temp = vec2(e.x + e.y, e.x - e.y) * 0.5;
	vec3 v = vec3(temp, 1.0 - abs(temp.x) - abs(temp.y));

	return normalize(v) * sign(e.z);
}


layout (local_size_x = 8, local_size_y = 8, local_size_z = 1) in;
void main( void )
{
	float	depth			= texelFetch(ZBuffer, ivec2(gl_GlobalInvocationID.xy), 0).r;

	vec3	Irradiance		= 0.f.xxx;
	vec3	Specular		= 0.f.xxx;

	if (depth != 0.f)
	{
		vec2	texCoords		= (gl_GlobalInvocationID.xy + 0.5f.xx) / screenSize;
		vec4	pos				= m_InvViewProj * vec4(texCoords.xy * vec2(2.f, -2.f) - vec2(1.f, -1.f), depth, 1.f);
		pos /= pos.w;

		vec3	albedo			= texelFetch(AlbedoTex, ivec2(gl_GlobalInvocationID.xy), 0).rgb;
		vec4	normalTex		= texelFetch(NormalTex, ivec2(gl_GlobalInvocationID.xy), 0);
		vec4	infoTex			= texelFetch(InfoTex, ivec2(gl_GlobalInvocationID.xy), 0);

		vec3	normal			= DecodeNormal(normalTex.rga);

		float	linearRoughness	= normalTex.b;
		float	roughness		= linearRoughness * linearRoughness;
		vec3	fresnel			= (0.16f * infoTex.g * infoTex.g).xxx;
		float	metallicity		= infoTex.r;

		if (metallicity > 0.f)
			fresnel = mix(fresnel, albedo.rgb * albedo.rgb, metallicity);

		vec3 view				= normalize(m_Eye.xyz - pos.xyz);

		if (dot(1.f.xxx, SunColor) > 0.f)
		{
			vec3 Radiance	= SunColor.rgb * max(0.f, dot(-SunDir, normal));// * texelFetch(FilteredShadows, ivec3(gl_FragCoord.xy, slice), 0).r;

			Irradiance		= Radiance * DisneyDiffuse(normal, -SunDir, view, linearRoughness) * (1.f / 3.1415926f);
			Specular		= Radiance * SpecularGGX(roughness, normal, -SunDir, view, fresnel);
		}

	/*uint index				= GetLightListIndex(LightListPtr, texCoords, depth, Near, Far);
	uint numLights			= index == 0xffffffff ? 0 : LightIndices[index];
	index++;

	uint numShadows			= 0;

	while (numLights > 0)
	{
		uint lightID		= LightIndices[index];

		if (lightID == subgroupMin(lightID))
		{
			vec3 l, Illuminance;

			SLight light;

			if ((lightID & (1 << 15)) == 0)
				light = lightData[lightID];
			else
				light = shadowLightData[lightID & 0x7fff].m_light;

			ComputeLight(light, pos.xyz, normal, Illuminance, l);

			if ((lightID & (1 << 15)) != 0)
			{
				Illuminance *= texelFetch(FilteredShadows, ivec3(gl_FragCoord.xy, numShadows), 0).r;
				numShadows++;
			}

			Diffuse.rgb		+= Illuminance * DisneyDiffuse(normal, l, view, linearRoughness) * (1.f / 3.1415926f);
			Specular.rgb	+= Illuminance * SpecularGGX(roughness, normal, l, view, fresnel); 

			numLights--;
			index++;
		}
	}*/

	//Diffuse.rgb *= 1.f - metallicity;
	}

	imageStore(OutputIrradiance,	ivec2(gl_GlobalInvocationID.xy), vec4(Irradiance, 0));
	imageStore(OutputSpecular,		ivec2(gl_GlobalInvocationID.xy), vec4(Specular, 0));
}
