#version 450


layout(binding = 0, std430) buffer coherent buf1
{
	uint	nextAddrIndex;
	uvec2	IndexNodes[];
};


layout(binding = 1, std430) buffer buf2
{
	uint	nextAddrParticleIndex;
	uint	ParticleIndex[];
};


layout(binding = 2, r32ui) uniform coherent uimage3D AccStructure;



uint AllocateIndices(uint numIndices)
{
	return atomicAdd(nextAddrParticleIndex, numIndices + 1);
}



layout (local_size_x = 8, local_size_y = 8, local_size_z = 8) in;
void main(void)
{
	uvec3 size = imageSize(AccStructure);

	if (gl_GlobalInvocationID.x < size.x && gl_GlobalInvocationID.y < size.y && gl_GlobalInvocationID.z < size.z)
	{
		uint head = imageLoad(AccStructure, ivec3(gl_GlobalInvocationID.xyz)).r;

		if (head != 0xffffffff)
		{
			uvec2 node = IndexNodes[head];
			uint numParticles = node.x;

			uint addr = AllocateIndices(numParticles);

			ParticleIndex[addr] = numParticles;

			for (uint i = 0; i < numParticles; i++)
			{
				node = IndexNodes[node.y];
				ParticleIndex[addr + i + 1] = node.x;
			}

			imageStore(AccStructure, ivec3(gl_GlobalInvocationID.xyz), uvec4(addr, 0, 0, 0));
		}
	}
}
