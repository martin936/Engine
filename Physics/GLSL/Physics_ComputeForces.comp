#version 450
#extension GL_EXT_samplerless_texture_functions : require

struct Particle
{
	vec3	Pos;
	uint	objectId;

	vec3	Velocity;
	float	Mass;
};


layout(binding = 0)	uniform utexture3D	AccelerationStructure;


layout(binding = 1, std430) buffer buf1
{
	Particle	particles[];
};

layout(binding = 2)	uniform texture3D	SDF;

layout(binding = 3) uniform sampler sampLinear;

layout(binding = 4, std430) buffer writeonly restrict buf2
{
	vec4	Forces[];
};


layout(push_constant) uniform pc0
{
	vec3	Center;
	float	Radius;

	vec3	Size;
	uint	NumParticles;

	vec4	SDFCenter;
	vec4	SDFSize;
};


vec3 SDFGradient(in vec3 pos)
{
	ivec3 size = textureSize(SDF, 0).xyz;

	vec3 cellSize = SDFSize.xyz / size;

	vec3 dx = 0.5f * cellSize;

	vec3 p = (pos - SDFCenter.xyz) / SDFSize.xyz + 0.5f;

	vec3 grad;
	grad.x = textureLod(sampler3D(SDF, sampLinear), p + vec3(dx.x, 0, 0), 0).r - textureLod(sampler3D(SDF, sampLinear), p - vec3(dx.x, 0, 0), 0).r;
	grad.y = textureLod(sampler3D(SDF, sampLinear), p + vec3(0, dx.y, 0), 0).r - textureLod(sampler3D(SDF, sampLinear), p - vec3(0, dx.y, 0), 0).r;
	grad.z = textureLod(sampler3D(SDF, sampLinear), p + vec3(0, 0, dx.z), 0).r - textureLod(sampler3D(SDF, sampLinear), p - vec3(0, 0, dx.z), 0).r;

	grad /= 2.f * dx;

	return grad;
}


layout(local_size_x = 256, local_size_y = 1, local_size_z = 1) in;
void main() 
{
	if (gl_GlobalInvocationID.x < NumParticles)
	{
		vec3	pos	= particles[gl_GlobalInvocationID.x].Pos;
		float	m	= particles[gl_GlobalInvocationID.x].Mass;

		vec3 force = -9.81f * vec3(0.f, 0.f, 1.f) * m;

		if (min(SDFSize.x, min(SDFSize.y, SDFSize.z)) > 0.01f)
		{
			vec3 coords = (pos - SDFCenter.xyz) / SDFSize.xyz + 0.5f;

			if (coords.x * (1.f - coords.x) > 0.f && coords.y * (1.f - coords.y) > 0.f && coords.z * (1.f - coords.z) > 0.f)
			{
				float d = textureLod(sampler3D(SDF, sampLinear), coords, 0.f).x;

				if (d < 0.f)
				{
					vec3 n = SDFGradient(coords);
					n /= min(1e-6f, length(n));

					vec3 v = particles[gl_GlobalInvocationID.x].Velocity;
					//v -= dot(v, n) * n;

					float k = 1e-7f;

					//force += -0.1f * v;
					force += -k * (d / Radius) * n - 1e-1f * v;//-k * ((d / Radius) * n - 0.001f * v);
					//force -= 0.01f * v * invm;
				}
			}
		}

		Forces[gl_GlobalInvocationID.x] = vec4(force, 0.f);
	}
}
