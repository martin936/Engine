#version 450

struct Particle
{
	vec3	Pos;
	uint	objectId;

	vec3	Velocity;
	float	Mass;
};


struct Rigidbody
{
	vec3	CenterOfMass;
	uint	NumParticles;

	vec3	LinearMomentum;
	float	Mass;

	vec4	AngularMomentum;
	vec4	Rotation;
};


layout(binding = 0, std430) buffer restrict buf1
{
	Rigidbody	solids[];
};


layout(binding = 1, std430) buffer readonly restrict buf2
{
	vec4	initPosition[];
};


layout(binding = 2, std430) buffer restrict buf3
{
	Particle	particles[];
};


layout(push_constant) uniform pc0
{
	uint	NumParticles;
	float	dt;
};



vec3 rotate_vector_by_quaternion(vec3 v, vec4 q)
{
    // Extract the vector part of the quaternion
    vec3 u = vec3(q.x, q.y, q.z);

    // Extract the scalar part of the quaternion
    float s = q.w;

    // Do the math
    return 2.0f * dot(u, v) * u + (s * s - dot(u, u)) * v + 2.0f * s * cross(u, v);
}


vec4 quaternionMult(vec4 H1, vec4 H2)
{
	vec4 H;

	H.w = H1.w * H2.w - H1.x * H2.x - H1.y * H2.y - H1.z * H2.z;
	H.x = H1.x * H2.w + H1.w * H2.x + H1.y * H2.z - H1.z * H2.y;
	H.y = H1.y * H2.w + H1.w * H2.y + H1.z * H2.x - H1.x * H2.z;
	H.z = H1.z * H2.w + H1.w * H2.z + H1.x * H2.y - H1.y * H2.x;

	return H;
}



layout(local_size_x = 256, local_size_y = 1, local_size_z = 1) in;
void main() 
{
	if (gl_GlobalInvocationID.x < NumParticles)
	{
		uint	objectId		= particles[gl_GlobalInvocationID.x].objectId;
		vec4	rot				= solids[objectId].Rotation;
		vec3	angularMomentum = solids[objectId].AngularMomentum.xyz;
		float	theta			= angularMomentum.length();
		vec3	a				= angularMomentum / max(1e-3f, theta);

		theta *= 0.5f * dt;

		float	c	= cos(theta);
		float	s	= sin(theta);
		vec4	dQ	= vec4(a * s, c);

		rot = quaternionMult(dQ, rot);
		vec3	pos = initPosition[gl_GlobalInvocationID.x].xyz;//rotate_vector_by_quaternion(initPosition[gl_GlobalInvocationID.x].xyz, rot);

		vec3 v	= solids[objectId].LinearMomentum.xyz + vec3(0.f, 0.f, -9.81f) * dt;
		vec3 dv = v * dt;

		//v += cross(pos, solids[objectId].AngularMomentum.xyz);

		pos += solids[objectId].CenterOfMass + dv;

		particles[gl_GlobalInvocationID.x].Pos = pos;
		particles[gl_GlobalInvocationID.x].Velocity = v;
	}
}
