#version 450

layout (std430, binding=0) buffer GlobalInfo
{
	uint	m_nVertexCount;
	uint	m_nTriangleCount;
	uint	m_nMaxNeighbourCount;
	uint	m_IsColliding;
	float	m_fRestVolume;
	float	m_fVolume;
	float	m_fInternalEnergy;
	float	m_fCompressibility;
	float	m_fMass;
	float	m_fSpring;
	float	m_Friction;
	float	m_fDamping;
	float	m_fRefSpeed;
	float	m_fMaxAbsoluteSpeed;
	float	m_fMaxRelativeSpeed;
	float	m_MeanPosition[3];
	float	m_MeanVelocity[3];
	float	m_NewMeanVelocity[3];
	float	m_ExternalForces[3];
	float	m_AttractorPosition[3];
	float	m_fAttractorStrength;
	uint	m_uMutex;
};


struct PhysicalVertex
{
	float	m_Position[3];
	float	m_Normal[3];
	float	m_Velocity[3];
	float	m_Forces[3];
};


struct Triangle
{
	uint	m_Index[3];
};


layout (std430, binding = 1) buffer VertexBuffer
{
	PhysicalVertex	m_Vertex[];
};

layout (std430, binding = 2) buffer IndexBuffer
{
	Triangle	m_Triangle[];
};

layout (local_size_x = 128, local_size_y = 1, local_size_z = 1) in;

shared float Volume[128];

void main()
{
	vec3 vertices[3];
	vec3 center = vec3( m_MeanPosition[0], m_MeanPosition[1], m_MeanPosition[2] );
	uint i;
	uint done = 0;

	if (gl_GlobalInvocationID.x < m_nTriangleCount)
	{
		for(i = 0; i < 3; i++)
			vertices[i] = vec3( m_Vertex[m_Triangle[gl_GlobalInvocationID.x].m_Index[i]].m_Position[0], 
								m_Vertex[m_Triangle[gl_GlobalInvocationID.x].m_Index[i]].m_Position[1],
								m_Vertex[m_Triangle[gl_GlobalInvocationID.x].m_Index[i]].m_Position[2] );

		Volume[gl_LocalInvocationID.x] = abs(dot(center - vertices[0], cross(vertices[1] - vertices[0], vertices[2] - vertices[0])));
	}

	else
		Volume[gl_LocalInvocationID.x] = 0.f;

	memoryBarrierShared();
	barrier();

	if (gl_LocalInvocationID.x == 0)
	{
		for(i = 1; i < gl_WorkGroupSize.x; i++)
			Volume[0] += Volume[i];

		while (done == 0) 
		{
			if (atomicCompSwap(m_uMutex, 0, 1) == 0) 
			{
				m_fVolume += 0.1666667f * Volume[0];

				m_uMutex = 0;
				done = 1;
			}
		}

		/*if (m_fRestVolume < 0.f)
			m_fRestVolume = m_fVolume;*/
	}
}
